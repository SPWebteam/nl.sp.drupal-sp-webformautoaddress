<?php

/**
 * @file
 * Webform Auto Address component.
 */

/**
 * Implements hook_help().
 */
function sp_webformautoaddress_help($path, $arg) {
  switch ($path) {
    case 'admin/help#webformautoaddress':
      // Construct the path of this module's readme file.
      $path_readme = drupal_get_path('module', 'webformautoaddress') . '/README.txt';

      // If the readme is available, return the contents.
      if (file_exists($path_readme)) {
        $readme = file_get_contents($path_readme);

        return '<h1>README.txt</h1><pre>' . check_plain($readme) . '</pre>';
      }
  }
}

/**
 * Implements hook_webform_component_info().
 */
function sp_webformautoaddress_webform_component_info() {
  $components = array();

  $components['sp_address_auto'] = array(
    'label' => t('Pro6pp Address completion'),
    'description' => t('Address is autocompleted through the API of pro6pp.nl, using postal_code and house_number fields.'),
    'features' => array(
      'analysis' => FALSE,
      'csv' => TRUE,
      'email' => TRUE,
      'email_address' => FALSE,
      'email_name' => FALSE,
      'required' => TRUE,
      'conditional' => TRUE,
      'title_display' => TRUE,
      'title_inline' => TRUE,
      'private' => FALSE,
      'group' => FALSE,
      'spam_analysis' => FALSE,
      'attachment' => FALSE,
    ),
  );

  return $components;
}

/**
 * Implements _webform_defaults_component().
 */
function _webform_defaults_sp_address_auto() {
  return array(
    'name' => '',
    'form_key' => NULL,
    'required' => FALSE,
    'pid' => 0,
    'weight' => 0,
    'extra' => array(
      'secret' => '',
      'private' => TRUE,
    ),
  );
}

/**
 * Implements _webform_edit_component().
 */
function _webform_edit_sp_address_auto($component) {
  $form = array();

  return $form;
}

/**
 * Implements _webform_render_component().
 */
function _webform_render_sp_address_auto($component, $value = NULL, $filter = TRUE) {
  // Wrap the form in a container, in order to correctly apply the weight.
  $elements = array(
    '#type' => 'hidden',
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'sp_webformautoaddress') . '/css/sp_webformautoaddress.css',
      ),
      'js' => array(
        drupal_get_path('module', 'sp_webformautoaddress') . '/js/sp_webformautoaddress.js',
      ),
    ),
    '#weight' => $component['weight'],
    '#theme_wrappers' => array('webform_element'),
    '#webform_component' => $component,
  );

  return $elements;
}

/**
 * Retrieve street name and city belonging to postal code and house number.
 *
 * Callback for _webform_render_address_auto().
 *
 * NB: Normally, this function should be kept as simple as possible (i.e., just
 *     return the portion of the form that should be adjusted). However, since
 *     Webform doesn't provide the $form_state in a simple manner and we only
 *     provide additional functionallity to help the visitor, we allow us to do
 *     a little bit more in this function.. (otherwise we have to use the
 *     hook_form_alter() function to add AJAX components).
 */
function sp_webformautoaddress_ajax_callback($form, $form_state) {
  // Get the key used for this Webform component.
  $form_key = $form_state['triggering_element']['#webform_component']['form_key'];

  // Get the provided postal code and house number.
  $values = $form_state['values'];
  foreach ($form_state['triggering_element']['#parents'] as $parent) {
    $values = $values[$parent];

    if ($parent == $form_key) {
      break;
    }
  }
  $postal_code = $values['postal_code'];
  $house_number = $values['house_number'];

  // Perform the lookup
  if(!empty($postal_code) && !empty($house_number)) {
    $data = sp_webformautoaddress_pcapi_lookup($postal_code, $house_number);
    
    // React on the provided information.
    if ($data['status'] == 'ok') {

      $commands = array();
      $arguments = array(
        'formKey' => drupal_clean_css_identifier($form_key), // we are selecting by the css class in the ajax call
        'street' => filter_xss($data['results'][0]['street']),
        'city' => filter_xss($data['results'][0]['city']),
      );
      $arguments = drupal_json_encode($arguments);
      $commands[] = ajax_command_invoke(NULL, 'SPwebformAutoAddressInject', array($arguments));

      return array(
        '#type' => 'ajax',
        '#commands' => $commands,
      );
    }
  }
}

/**
 * Retrieve street name and city belonging to postal code and house number.
 *
 * This function makes a call to the pro6pp.nl API to get the street name and
 * city that is associated with the postal code and house number.
 *
 * @param string $key
 *   The key that should be used to identify at the pro6pp.nl API service.
 * @param string $secret
 *   The secret that belongs to the $key.
 * @param string $postal_code
 *   The postal code of the address.
 * @param string $house_number
 *   The house number of the address.
 *
 * @return string[]
 *   The name of the street can be found at the index 'street' and the name of
 *   the name of the city at the index 'city' in the array.
 */
function sp_webformautoaddress_pcapi_lookup($postal_code, $house_number) {
  // First, parse the postal code and house number (which should split the
  // addition).
  $postal_code = sp_webformautoaddress_parse_postal_code($postal_code);
  list($house_number, $house_number_addition) = sp_webformautoaddress_parse_house_number($house_number);

  // Both the postal code and the house number should have a value.
  if (empty($postal_code) || empty($house_number)) {
    return array();
  }

  // We prevent making unnecessary lookups by caching results, 
  // also wrong lookups!
  $cache_key = 'sp_webformautoaddress:' . $postal_code . ':' . $house_number . ':' . $house_number_addition;

  // Use the local memory as the first level cache.
  $data = &drupal_static(__FUNCTION__);
  if (!isset($data)) {
    // When not stored in local memory, check the cache stored in the database.
    if(FALSE) {
    //if ($cache = cache_get($cache_key)) {
      $data = $cache->data;
    }
    else {
      // Construct the URL to perform the lookup with.
      $key = variable_get('pro6pp_key');
      $url = 'https://api.pro6pp.nl/v1/autocomplete?auth_key='.$key.'&nl_sixpp='.$postal_code.'&format=json';
      $response = drupal_http_request(url($url));

      // When the lookup went correctly, parse the JSON data.
      if ($response->code == 200) {
        $data = drupal_json_decode($response->data);
      }

      // Store the result in the cache of the database.
      //
      // NB: if the lookup didn't responded in a correct result, we still store
      // a 'mark' in the database. In this way also invalid lookups will be
      // served from cache the next time.
      cache_set($cache_key, $data, 'cache', time() + 900);
    }
  }

  return $data;
}

/**
 * Parse a postal code to be used in the request to pro6pp.nl API.
 *
 * @param string $postal_code
 *   The postal code that should be normalized.
 *
 * @return string
 *   The normalized postal code.
 */
function sp_webformautoaddress_parse_postal_code($postal_code) {
  // First, remove any whitespaces.
  $postal_code = str_replace(' ', '', trim($postal_code));

  // If the postal code is in the form of 1234AB, than return the trimmed
  // version.
  if ((boolean) preg_match('~^\d{4}[[:alpha:]]{2}$~', $postal_code)) {
    return $postal_code;
  }

  return '';
}

/**
 * Parse the house number by separating the number from the additional value.
 *
 * @param string $house_number_full
 *   The house number of the address (including an possible addition).
 *
 * @return string[]
 *   Normalized version of the house number, where the first index of the array
 *   contains the number and the second value is the addition.
 */
function sp_webformautoaddress_parse_house_number($house_number_full) {
  // Remove white spaces before and after the provided house number (including
  // addition).
  $house_number_full = trim($house_number_full);

  $house_number = '';
  $house_number_addition = '';
  if (preg_match('~^(?P<house_number>\d+)[^[:alnum:]]*(?P<addition>[[:alnum:]]*)$~', $house_number_full, $match)) {
    $house_number = $match['house_number'];
    $house_number_addition = !empty($match['addition']) ? $match['addition'] : '';
  }

  return array($house_number, $house_number_addition);
}

/**
 * Implements _webform_display_component().
 */
function _webform_display_sp_address_auto($component, $value, $format = 'html') {
  return array(
    '#title' => $component['name'],
    '#weight' => $component['weight'],
    '#theme' => 'webform_display_address_auto',
    '#theme_wrappers' => $format == 'html' ? array('webform_element') : array('webform_element_text'),
    '#post_render' => array('webform_element_wrapper'),
    '#component' => $component,
    '#format' => $format,
    '#value' => isset($value) ? sp_webformautoaddress_display_format($value) : '',
  );
}

/**
 * Implements _webform_theme_component().
 */
function _webform_theme_sp_address_auto() {
  return array(
    'webform_display_address_auto' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Returns HTML for displaying the address.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #format, #value.
 *
 * @see theme_webform_element
 *
 * @ingroup themeable
 */
function theme_webform_display_sp_address_auto(array $variables) {
  $element = $variables['element'];
  $value = $element['#format'] == 'html' ? check_plain($element['#value']) : $element['#value'];

  return $value !== '' ? $value : ' ';
}

/**
 * Implements _webform_table_component().
 */
function _webform_table_sp_address_auto($component, $value) {
  return check_plain($value['street_name'] . ' ' . $value['house_number']) . '<br />' .
         check_plain($value['postal_code'] . ' ' . $value['city']);
}

/**
 * Implements _webform_csv_headers_component().
 */
function _webform_csv_headers_sp_address_auto($component, $export_options) {
  $header = array();
  $header[0] = array('');
  $header[1] = array($component['name']);
  $header[2] = array();

  $header[2][] = t('Street name');
  $header[2][] = t('House number');
  $header[2][] = t('Postal code');
  $header[2][] = t('City');

  return $header;
}

/**
 * Implements _webform_csv_data_component().
 */
function _webform_csv_data_sp_address_auto($component, $export_options, $value) {
  $return = array();

  $return[] = $value['street_name'];
  $return[] = $value['house_number'];
  $return[] = $value['postal_code'];
  $return[] = $value['city'];

  return $return;
}

/**
 * Format the address in a textual representation.
 *
 * @param string[] $value
 *   An associative array containing the address information (i.e., street name,
 *   house number, postal code and the city).
 *
 * @return string
 *   A formatted string representing the address.
 */
function sp_webformautoaddress_display_format(array $value) {
  return $value['street_name'] . ' ' . $value['house_number'] . ', ' . $value['postal_code'] . ' ' . $value['city'];
}
